// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  feedback: (where?: FeedbackWhereInput) => Promise<boolean>;
  hashtag: (where?: HashtagWhereInput) => Promise<boolean>;
  info: (where?: InfoWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  story: (where?: StoryWhereInput) => Promise<boolean>;
  storyReport: (where?: StoryReportWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  feedback: (where: FeedbackWhereUniqueInput) => FeedbackPromise;
  feedbacks: (
    args?: {
      where?: FeedbackWhereInput;
      orderBy?: FeedbackOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Feedback>;
  feedbacksConnection: (
    args?: {
      where?: FeedbackWhereInput;
      orderBy?: FeedbackOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FeedbackConnectionPromise;
  hashtag: (where: HashtagWhereUniqueInput) => HashtagPromise;
  hashtags: (
    args?: {
      where?: HashtagWhereInput;
      orderBy?: HashtagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Hashtag>;
  hashtagsConnection: (
    args?: {
      where?: HashtagWhereInput;
      orderBy?: HashtagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => HashtagConnectionPromise;
  info: (where: InfoWhereUniqueInput) => InfoPromise;
  infoes: (
    args?: {
      where?: InfoWhereInput;
      orderBy?: InfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Info>;
  infoesConnection: (
    args?: {
      where?: InfoWhereInput;
      orderBy?: InfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InfoConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikePromise;
  likes: (
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Like>;
  likesConnection: (
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LikeConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Message>;
  messagesConnection: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessageConnectionPromise;
  notification: (where: NotificationWhereUniqueInput) => NotificationPromise;
  notifications: (
    args?: {
      where?: NotificationWhereInput;
      orderBy?: NotificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Notification>;
  notificationsConnection: (
    args?: {
      where?: NotificationWhereInput;
      orderBy?: NotificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NotificationConnectionPromise;
  story: (where: StoryWhereUniqueInput) => StoryPromise;
  stories: (
    args?: {
      where?: StoryWhereInput;
      orderBy?: StoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Story>;
  storiesConnection: (
    args?: {
      where?: StoryWhereInput;
      orderBy?: StoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StoryConnectionPromise;
  storyReport: (where: StoryReportWhereUniqueInput) => StoryReportPromise;
  storyReports: (
    args?: {
      where?: StoryReportWhereInput;
      orderBy?: StoryReportOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<StoryReport>;
  storyReportsConnection: (
    args?: {
      where?: StoryReportWhereInput;
      orderBy?: StoryReportOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StoryReportConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoPromise;
  videos: (
    args?: {
      where?: VideoWhereInput;
      orderBy?: VideoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Video>;
  videosConnection: (
    args?: {
      where?: VideoWhereInput;
      orderBy?: VideoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createFeedback: (data: FeedbackCreateInput) => FeedbackPromise;
  updateFeedback: (
    args: { data: FeedbackUpdateInput; where: FeedbackWhereUniqueInput }
  ) => FeedbackPromise;
  updateManyFeedbacks: (
    args: { data: FeedbackUpdateManyMutationInput; where?: FeedbackWhereInput }
  ) => BatchPayloadPromise;
  upsertFeedback: (
    args: {
      where: FeedbackWhereUniqueInput;
      create: FeedbackCreateInput;
      update: FeedbackUpdateInput;
    }
  ) => FeedbackPromise;
  deleteFeedback: (where: FeedbackWhereUniqueInput) => FeedbackPromise;
  deleteManyFeedbacks: (where?: FeedbackWhereInput) => BatchPayloadPromise;
  createHashtag: (data: HashtagCreateInput) => HashtagPromise;
  updateHashtag: (
    args: { data: HashtagUpdateInput; where: HashtagWhereUniqueInput }
  ) => HashtagPromise;
  updateManyHashtags: (
    args: { data: HashtagUpdateManyMutationInput; where?: HashtagWhereInput }
  ) => BatchPayloadPromise;
  upsertHashtag: (
    args: {
      where: HashtagWhereUniqueInput;
      create: HashtagCreateInput;
      update: HashtagUpdateInput;
    }
  ) => HashtagPromise;
  deleteHashtag: (where: HashtagWhereUniqueInput) => HashtagPromise;
  deleteManyHashtags: (where?: HashtagWhereInput) => BatchPayloadPromise;
  createInfo: (data: InfoCreateInput) => InfoPromise;
  updateInfo: (
    args: { data: InfoUpdateInput; where: InfoWhereUniqueInput }
  ) => InfoPromise;
  updateManyInfoes: (
    args: { data: InfoUpdateManyMutationInput; where?: InfoWhereInput }
  ) => BatchPayloadPromise;
  upsertInfo: (
    args: {
      where: InfoWhereUniqueInput;
      create: InfoCreateInput;
      update: InfoUpdateInput;
    }
  ) => InfoPromise;
  deleteInfo: (where: InfoWhereUniqueInput) => InfoPromise;
  deleteManyInfoes: (where?: InfoWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (
    args: { data: LikeUpdateInput; where: LikeWhereUniqueInput }
  ) => LikePromise;
  upsertLike: (
    args: {
      where: LikeWhereUniqueInput;
      create: LikeCreateInput;
      update: LikeUpdateInput;
    }
  ) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (
    args: { data: MessageUpdateInput; where: MessageWhereUniqueInput }
  ) => MessagePromise;
  updateManyMessages: (
    args: { data: MessageUpdateManyMutationInput; where?: MessageWhereInput }
  ) => BatchPayloadPromise;
  upsertMessage: (
    args: {
      where: MessageWhereUniqueInput;
      create: MessageCreateInput;
      update: MessageUpdateInput;
    }
  ) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (
    args: { data: NotificationUpdateInput; where: NotificationWhereUniqueInput }
  ) => NotificationPromise;
  updateManyNotifications: (
    args: {
      data: NotificationUpdateManyMutationInput;
      where?: NotificationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNotification: (
    args: {
      where: NotificationWhereUniqueInput;
      create: NotificationCreateInput;
      update: NotificationUpdateInput;
    }
  ) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createStory: (data: StoryCreateInput) => StoryPromise;
  updateStory: (
    args: { data: StoryUpdateInput; where: StoryWhereUniqueInput }
  ) => StoryPromise;
  updateManyStories: (
    args: { data: StoryUpdateManyMutationInput; where?: StoryWhereInput }
  ) => BatchPayloadPromise;
  upsertStory: (
    args: {
      where: StoryWhereUniqueInput;
      create: StoryCreateInput;
      update: StoryUpdateInput;
    }
  ) => StoryPromise;
  deleteStory: (where: StoryWhereUniqueInput) => StoryPromise;
  deleteManyStories: (where?: StoryWhereInput) => BatchPayloadPromise;
  createStoryReport: (data: StoryReportCreateInput) => StoryReportPromise;
  updateStoryReport: (
    args: { data: StoryReportUpdateInput; where: StoryReportWhereUniqueInput }
  ) => StoryReportPromise;
  updateManyStoryReports: (
    args: {
      data: StoryReportUpdateManyMutationInput;
      where?: StoryReportWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertStoryReport: (
    args: {
      where: StoryReportWhereUniqueInput;
      create: StoryReportCreateInput;
      update: StoryReportUpdateInput;
    }
  ) => StoryReportPromise;
  deleteStoryReport: (where: StoryReportWhereUniqueInput) => StoryReportPromise;
  deleteManyStoryReports: (
    where?: StoryReportWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (
    args: { data: VideoUpdateInput; where: VideoWhereUniqueInput }
  ) => VideoPromise;
  updateManyVideos: (
    args: { data: VideoUpdateManyMutationInput; where?: VideoWhereInput }
  ) => BatchPayloadPromise;
  upsertVideo: (
    args: {
      where: VideoWhereUniqueInput;
      create: VideoCreateInput;
      update: VideoUpdateInput;
    }
  ) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  feedback: (
    where?: FeedbackSubscriptionWhereInput
  ) => FeedbackSubscriptionPayloadSubscription;
  hashtag: (
    where?: HashtagSubscriptionWhereInput
  ) => HashtagSubscriptionPayloadSubscription;
  info: (
    where?: InfoSubscriptionWhereInput
  ) => InfoSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  story: (
    where?: StorySubscriptionWhereInput
  ) => StorySubscriptionPayloadSubscription;
  storyReport: (
    where?: StoryReportSubscriptionWhereInput
  ) => StoryReportSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "USER" | "MOD";

export type HashtagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "body_ASC"
  | "body_DESC"
  | "suspended_ASC"
  | "suspended_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "browser_ASC"
  | "browser_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "os_ASC"
  | "os_DESC"
  | "country_ASC"
  | "country_DESC"
  | "language_ASC"
  | "language_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "body_ASC"
  | "body_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StoryReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "reason_ASC"
  | "reason_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FeedbackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "body_ASC"
  | "body_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "body_ASC"
  | "body_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "banned_ASC"
  | "banned_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "link_ASC"
  | "link_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface HashtagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  moderator?: UserWhereInput;
  addedBy?: UserWhereInput;
  AND?: HashtagWhereInput[] | HashtagWhereInput;
  OR?: HashtagWhereInput[] | HashtagWhereInput;
  NOT?: HashtagWhereInput[] | HashtagWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  verified?: Boolean;
  verified_not?: Boolean;
  banned?: Boolean;
  banned_not?: Boolean;
  hashtags_every?: HashtagWhereInput;
  hashtags_some?: HashtagWhereInput;
  hashtags_none?: HashtagWhereInput;
  stories_every?: StoryWhereInput;
  stories_some?: StoryWhereInput;
  stories_none?: StoryWhereInput;
  info_every?: InfoWhereInput;
  info_some?: InfoWhereInput;
  info_none?: InfoWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface StoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  postedBy?: UserWhereInput;
  hashtags_every?: HashtagWhereInput;
  hashtags_some?: HashtagWhereInput;
  hashtags_none?: HashtagWhereInput;
  suspended?: Boolean;
  suspended_not?: Boolean;
  likes_every?: LikeWhereInput;
  likes_some?: LikeWhereInput;
  likes_none?: LikeWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  reportes_every?: StoryReportWhereInput;
  reportes_some?: StoryReportWhereInput;
  reportes_none?: StoryReportWhereInput;
  AND?: StoryWhereInput[] | StoryWhereInput;
  OR?: StoryWhereInput[] | StoryWhereInput;
  NOT?: StoryWhereInput[] | StoryWhereInput;
}

export interface LikeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  story?: StoryWhereInput;
  likedBy?: UserWhereInput;
  AND?: LikeWhereInput[] | LikeWhereInput;
  OR?: LikeWhereInput[] | LikeWhereInput;
  NOT?: LikeWhereInput[] | LikeWhereInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  story?: StoryWhereInput;
  commentedBy?: UserWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface StoryReportWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  story?: StoryWhereInput;
  reportedBy?: UserWhereInput;
  reason?: String;
  reason_not?: String;
  reason_in?: String[] | String;
  reason_not_in?: String[] | String;
  reason_lt?: String;
  reason_lte?: String;
  reason_gt?: String;
  reason_gte?: String;
  reason_contains?: String;
  reason_not_contains?: String;
  reason_starts_with?: String;
  reason_not_starts_with?: String;
  reason_ends_with?: String;
  reason_not_ends_with?: String;
  AND?: StoryReportWhereInput[] | StoryReportWhereInput;
  OR?: StoryReportWhereInput[] | StoryReportWhereInput;
  NOT?: StoryReportWhereInput[] | StoryReportWhereInput;
}

export interface InfoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  browser?: String;
  browser_not?: String;
  browser_in?: String[] | String;
  browser_not_in?: String[] | String;
  browser_lt?: String;
  browser_lte?: String;
  browser_gt?: String;
  browser_gte?: String;
  browser_contains?: String;
  browser_not_contains?: String;
  browser_starts_with?: String;
  browser_not_starts_with?: String;
  browser_ends_with?: String;
  browser_not_ends_with?: String;
  ip?: String;
  ip_not?: String;
  ip_in?: String[] | String;
  ip_not_in?: String[] | String;
  ip_lt?: String;
  ip_lte?: String;
  ip_gt?: String;
  ip_gte?: String;
  ip_contains?: String;
  ip_not_contains?: String;
  ip_starts_with?: String;
  ip_not_starts_with?: String;
  ip_ends_with?: String;
  ip_not_ends_with?: String;
  os?: String;
  os_not?: String;
  os_in?: String[] | String;
  os_not_in?: String[] | String;
  os_lt?: String;
  os_lte?: String;
  os_gt?: String;
  os_gte?: String;
  os_contains?: String;
  os_not_contains?: String;
  os_starts_with?: String;
  os_not_starts_with?: String;
  os_ends_with?: String;
  os_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  AND?: InfoWhereInput[] | InfoWhereInput;
  OR?: InfoWhereInput[] | InfoWhereInput;
  NOT?: InfoWhereInput[] | InfoWhereInput;
}

export type FeedbackWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FeedbackWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  sentBy?: UserWhereInput;
  AND?: FeedbackWhereInput[] | FeedbackWhereInput;
  OR?: FeedbackWhereInput[] | FeedbackWhereInput;
  NOT?: FeedbackWhereInput[] | FeedbackWhereInput;
}

export type HashtagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type InfoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type LikeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  sentBy?: UserWhereInput;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NotificationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  story?: StoryWhereInput;
  sender?: UserWhereInput;
  receiver?: UserWhereInput;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  AND?: NotificationWhereInput[] | NotificationWhereInput;
  OR?: NotificationWhereInput[] | NotificationWhereInput;
  NOT?: NotificationWhereInput[] | NotificationWhereInput;
}

export type StoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type StoryReportWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export type VideoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VideoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  link?: String;
  link_not?: String;
  link_in?: String[] | String;
  link_not_in?: String[] | String;
  link_lt?: String;
  link_lte?: String;
  link_gt?: String;
  link_gte?: String;
  link_contains?: String;
  link_not_contains?: String;
  link_starts_with?: String;
  link_not_starts_with?: String;
  link_ends_with?: String;
  link_not_ends_with?: String;
  sentBy?: UserWhereInput;
  AND?: VideoWhereInput[] | VideoWhereInput;
  OR?: VideoWhereInput[] | VideoWhereInput;
  NOT?: VideoWhereInput[] | VideoWhereInput;
}

export interface CommentCreateInput {
  body: String;
  story: StoryCreateOneWithoutCommentsInput;
  commentedBy: UserCreateOneInput;
}

export interface StoryCreateOneWithoutCommentsInput {
  create?: StoryCreateWithoutCommentsInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryCreateWithoutCommentsInput {
  body: String;
  postedBy: UserCreateOneWithoutStoriesInput;
  hashtags?: HashtagCreateManyInput;
  suspended: Boolean;
  likes?: LikeCreateManyWithoutStoryInput;
  reportes?: StoryReportCreateManyWithoutStoryInput;
}

export interface UserCreateOneWithoutStoriesInput {
  create?: UserCreateWithoutStoriesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutStoriesInput {
  username: String;
  password: String;
  email: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
  hashtags?: HashtagCreateManyWithoutModeratorInput;
  info?: InfoCreateManyInput;
}

export interface HashtagCreateManyWithoutModeratorInput {
  create?:
    | HashtagCreateWithoutModeratorInput[]
    | HashtagCreateWithoutModeratorInput;
  connect?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
}

export interface HashtagCreateWithoutModeratorInput {
  title: String;
  addedBy: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  username: String;
  password: String;
  email: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
  hashtags?: HashtagCreateManyWithoutModeratorInput;
  stories?: StoryCreateManyWithoutPostedByInput;
  info?: InfoCreateManyInput;
}

export interface StoryCreateManyWithoutPostedByInput {
  create?: StoryCreateWithoutPostedByInput[] | StoryCreateWithoutPostedByInput;
  connect?: StoryWhereUniqueInput[] | StoryWhereUniqueInput;
}

export interface StoryCreateWithoutPostedByInput {
  body: String;
  hashtags?: HashtagCreateManyInput;
  suspended: Boolean;
  likes?: LikeCreateManyWithoutStoryInput;
  comments?: CommentCreateManyWithoutStoryInput;
  reportes?: StoryReportCreateManyWithoutStoryInput;
}

export interface HashtagCreateManyInput {
  create?: HashtagCreateInput[] | HashtagCreateInput;
  connect?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
}

export interface HashtagCreateInput {
  title: String;
  moderator: UserCreateOneWithoutHashtagsInput;
  addedBy: UserCreateOneInput;
}

export interface UserCreateOneWithoutHashtagsInput {
  create?: UserCreateWithoutHashtagsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutHashtagsInput {
  username: String;
  password: String;
  email: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
  stories?: StoryCreateManyWithoutPostedByInput;
  info?: InfoCreateManyInput;
}

export interface InfoCreateManyInput {
  create?: InfoCreateInput[] | InfoCreateInput;
  connect?: InfoWhereUniqueInput[] | InfoWhereUniqueInput;
}

export interface InfoCreateInput {
  browser: String;
  ip: String;
  os: String;
  country: String;
  language: String;
  zip: String;
}

export interface LikeCreateManyWithoutStoryInput {
  create?: LikeCreateWithoutStoryInput[] | LikeCreateWithoutStoryInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface LikeCreateWithoutStoryInput {
  likedBy: UserCreateOneInput;
}

export interface CommentCreateManyWithoutStoryInput {
  create?: CommentCreateWithoutStoryInput[] | CommentCreateWithoutStoryInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutStoryInput {
  body: String;
  commentedBy: UserCreateOneInput;
}

export interface StoryReportCreateManyWithoutStoryInput {
  create?:
    | StoryReportCreateWithoutStoryInput[]
    | StoryReportCreateWithoutStoryInput;
  connect?: StoryReportWhereUniqueInput[] | StoryReportWhereUniqueInput;
}

export interface StoryReportCreateWithoutStoryInput {
  reportedBy: UserCreateOneInput;
  reason: String;
}

export interface CommentUpdateInput {
  body?: String;
  story?: StoryUpdateOneRequiredWithoutCommentsInput;
  commentedBy?: UserUpdateOneRequiredInput;
}

export interface StoryUpdateOneRequiredWithoutCommentsInput {
  create?: StoryCreateWithoutCommentsInput;
  update?: StoryUpdateWithoutCommentsDataInput;
  upsert?: StoryUpsertWithoutCommentsInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryUpdateWithoutCommentsDataInput {
  body?: String;
  postedBy?: UserUpdateOneRequiredWithoutStoriesInput;
  hashtags?: HashtagUpdateManyInput;
  suspended?: Boolean;
  likes?: LikeUpdateManyWithoutStoryInput;
  reportes?: StoryReportUpdateManyWithoutStoryInput;
}

export interface UserUpdateOneRequiredWithoutStoriesInput {
  create?: UserCreateWithoutStoriesInput;
  update?: UserUpdateWithoutStoriesDataInput;
  upsert?: UserUpsertWithoutStoriesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutStoriesDataInput {
  username?: String;
  password?: String;
  email?: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
  hashtags?: HashtagUpdateManyWithoutModeratorInput;
  info?: InfoUpdateManyInput;
}

export interface HashtagUpdateManyWithoutModeratorInput {
  create?:
    | HashtagCreateWithoutModeratorInput[]
    | HashtagCreateWithoutModeratorInput;
  delete?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  connect?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  set?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  disconnect?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  update?:
    | HashtagUpdateWithWhereUniqueWithoutModeratorInput[]
    | HashtagUpdateWithWhereUniqueWithoutModeratorInput;
  upsert?:
    | HashtagUpsertWithWhereUniqueWithoutModeratorInput[]
    | HashtagUpsertWithWhereUniqueWithoutModeratorInput;
  deleteMany?: HashtagScalarWhereInput[] | HashtagScalarWhereInput;
  updateMany?:
    | HashtagUpdateManyWithWhereNestedInput[]
    | HashtagUpdateManyWithWhereNestedInput;
}

export interface HashtagUpdateWithWhereUniqueWithoutModeratorInput {
  where: HashtagWhereUniqueInput;
  data: HashtagUpdateWithoutModeratorDataInput;
}

export interface HashtagUpdateWithoutModeratorDataInput {
  title?: String;
  addedBy?: UserUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: String;
  password?: String;
  email?: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
  hashtags?: HashtagUpdateManyWithoutModeratorInput;
  stories?: StoryUpdateManyWithoutPostedByInput;
  info?: InfoUpdateManyInput;
}

export interface StoryUpdateManyWithoutPostedByInput {
  create?: StoryCreateWithoutPostedByInput[] | StoryCreateWithoutPostedByInput;
  delete?: StoryWhereUniqueInput[] | StoryWhereUniqueInput;
  connect?: StoryWhereUniqueInput[] | StoryWhereUniqueInput;
  set?: StoryWhereUniqueInput[] | StoryWhereUniqueInput;
  disconnect?: StoryWhereUniqueInput[] | StoryWhereUniqueInput;
  update?:
    | StoryUpdateWithWhereUniqueWithoutPostedByInput[]
    | StoryUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | StoryUpsertWithWhereUniqueWithoutPostedByInput[]
    | StoryUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: StoryScalarWhereInput[] | StoryScalarWhereInput;
  updateMany?:
    | StoryUpdateManyWithWhereNestedInput[]
    | StoryUpdateManyWithWhereNestedInput;
}

export interface StoryUpdateWithWhereUniqueWithoutPostedByInput {
  where: StoryWhereUniqueInput;
  data: StoryUpdateWithoutPostedByDataInput;
}

export interface StoryUpdateWithoutPostedByDataInput {
  body?: String;
  hashtags?: HashtagUpdateManyInput;
  suspended?: Boolean;
  likes?: LikeUpdateManyWithoutStoryInput;
  comments?: CommentUpdateManyWithoutStoryInput;
  reportes?: StoryReportUpdateManyWithoutStoryInput;
}

export interface HashtagUpdateManyInput {
  create?: HashtagCreateInput[] | HashtagCreateInput;
  update?:
    | HashtagUpdateWithWhereUniqueNestedInput[]
    | HashtagUpdateWithWhereUniqueNestedInput;
  upsert?:
    | HashtagUpsertWithWhereUniqueNestedInput[]
    | HashtagUpsertWithWhereUniqueNestedInput;
  delete?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  connect?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  set?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  disconnect?: HashtagWhereUniqueInput[] | HashtagWhereUniqueInput;
  deleteMany?: HashtagScalarWhereInput[] | HashtagScalarWhereInput;
  updateMany?:
    | HashtagUpdateManyWithWhereNestedInput[]
    | HashtagUpdateManyWithWhereNestedInput;
}

export interface HashtagUpdateWithWhereUniqueNestedInput {
  where: HashtagWhereUniqueInput;
  data: HashtagUpdateDataInput;
}

export interface HashtagUpdateDataInput {
  title?: String;
  moderator?: UserUpdateOneRequiredWithoutHashtagsInput;
  addedBy?: UserUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredWithoutHashtagsInput {
  create?: UserCreateWithoutHashtagsInput;
  update?: UserUpdateWithoutHashtagsDataInput;
  upsert?: UserUpsertWithoutHashtagsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutHashtagsDataInput {
  username?: String;
  password?: String;
  email?: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
  stories?: StoryUpdateManyWithoutPostedByInput;
  info?: InfoUpdateManyInput;
}

export interface InfoUpdateManyInput {
  create?: InfoCreateInput[] | InfoCreateInput;
  update?:
    | InfoUpdateWithWhereUniqueNestedInput[]
    | InfoUpdateWithWhereUniqueNestedInput;
  upsert?:
    | InfoUpsertWithWhereUniqueNestedInput[]
    | InfoUpsertWithWhereUniqueNestedInput;
  delete?: InfoWhereUniqueInput[] | InfoWhereUniqueInput;
  connect?: InfoWhereUniqueInput[] | InfoWhereUniqueInput;
  set?: InfoWhereUniqueInput[] | InfoWhereUniqueInput;
  disconnect?: InfoWhereUniqueInput[] | InfoWhereUniqueInput;
  deleteMany?: InfoScalarWhereInput[] | InfoScalarWhereInput;
  updateMany?:
    | InfoUpdateManyWithWhereNestedInput[]
    | InfoUpdateManyWithWhereNestedInput;
}

export interface InfoUpdateWithWhereUniqueNestedInput {
  where: InfoWhereUniqueInput;
  data: InfoUpdateDataInput;
}

export interface InfoUpdateDataInput {
  browser?: String;
  ip?: String;
  os?: String;
  country?: String;
  language?: String;
  zip?: String;
}

export interface InfoUpsertWithWhereUniqueNestedInput {
  where: InfoWhereUniqueInput;
  update: InfoUpdateDataInput;
  create: InfoCreateInput;
}

export interface InfoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  browser?: String;
  browser_not?: String;
  browser_in?: String[] | String;
  browser_not_in?: String[] | String;
  browser_lt?: String;
  browser_lte?: String;
  browser_gt?: String;
  browser_gte?: String;
  browser_contains?: String;
  browser_not_contains?: String;
  browser_starts_with?: String;
  browser_not_starts_with?: String;
  browser_ends_with?: String;
  browser_not_ends_with?: String;
  ip?: String;
  ip_not?: String;
  ip_in?: String[] | String;
  ip_not_in?: String[] | String;
  ip_lt?: String;
  ip_lte?: String;
  ip_gt?: String;
  ip_gte?: String;
  ip_contains?: String;
  ip_not_contains?: String;
  ip_starts_with?: String;
  ip_not_starts_with?: String;
  ip_ends_with?: String;
  ip_not_ends_with?: String;
  os?: String;
  os_not?: String;
  os_in?: String[] | String;
  os_not_in?: String[] | String;
  os_lt?: String;
  os_lte?: String;
  os_gt?: String;
  os_gte?: String;
  os_contains?: String;
  os_not_contains?: String;
  os_starts_with?: String;
  os_not_starts_with?: String;
  os_ends_with?: String;
  os_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  AND?: InfoScalarWhereInput[] | InfoScalarWhereInput;
  OR?: InfoScalarWhereInput[] | InfoScalarWhereInput;
  NOT?: InfoScalarWhereInput[] | InfoScalarWhereInput;
}

export interface InfoUpdateManyWithWhereNestedInput {
  where: InfoScalarWhereInput;
  data: InfoUpdateManyDataInput;
}

export interface InfoUpdateManyDataInput {
  browser?: String;
  ip?: String;
  os?: String;
  country?: String;
  language?: String;
  zip?: String;
}

export interface UserUpsertWithoutHashtagsInput {
  update: UserUpdateWithoutHashtagsDataInput;
  create: UserCreateWithoutHashtagsInput;
}

export interface HashtagUpsertWithWhereUniqueNestedInput {
  where: HashtagWhereUniqueInput;
  update: HashtagUpdateDataInput;
  create: HashtagCreateInput;
}

export interface HashtagScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: HashtagScalarWhereInput[] | HashtagScalarWhereInput;
  OR?: HashtagScalarWhereInput[] | HashtagScalarWhereInput;
  NOT?: HashtagScalarWhereInput[] | HashtagScalarWhereInput;
}

export interface HashtagUpdateManyWithWhereNestedInput {
  where: HashtagScalarWhereInput;
  data: HashtagUpdateManyDataInput;
}

export interface HashtagUpdateManyDataInput {
  title?: String;
}

export interface LikeUpdateManyWithoutStoryInput {
  create?: LikeCreateWithoutStoryInput[] | LikeCreateWithoutStoryInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  set?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutStoryInput[]
    | LikeUpdateWithWhereUniqueWithoutStoryInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutStoryInput[]
    | LikeUpsertWithWhereUniqueWithoutStoryInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface LikeUpdateWithWhereUniqueWithoutStoryInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutStoryDataInput;
}

export interface LikeUpdateWithoutStoryDataInput {
  likedBy?: UserUpdateOneRequiredInput;
}

export interface LikeUpsertWithWhereUniqueWithoutStoryInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutStoryDataInput;
  create: LikeCreateWithoutStoryInput;
}

export interface LikeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  OR?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  NOT?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface CommentUpdateManyWithoutStoryInput {
  create?: CommentCreateWithoutStoryInput[] | CommentCreateWithoutStoryInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutStoryInput[]
    | CommentUpdateWithWhereUniqueWithoutStoryInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutStoryInput[]
    | CommentUpsertWithWhereUniqueWithoutStoryInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutStoryInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutStoryDataInput;
}

export interface CommentUpdateWithoutStoryDataInput {
  body?: String;
  commentedBy?: UserUpdateOneRequiredInput;
}

export interface CommentUpsertWithWhereUniqueWithoutStoryInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutStoryDataInput;
  create: CommentCreateWithoutStoryInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  body?: String;
}

export interface StoryReportUpdateManyWithoutStoryInput {
  create?:
    | StoryReportCreateWithoutStoryInput[]
    | StoryReportCreateWithoutStoryInput;
  delete?: StoryReportWhereUniqueInput[] | StoryReportWhereUniqueInput;
  connect?: StoryReportWhereUniqueInput[] | StoryReportWhereUniqueInput;
  set?: StoryReportWhereUniqueInput[] | StoryReportWhereUniqueInput;
  disconnect?: StoryReportWhereUniqueInput[] | StoryReportWhereUniqueInput;
  update?:
    | StoryReportUpdateWithWhereUniqueWithoutStoryInput[]
    | StoryReportUpdateWithWhereUniqueWithoutStoryInput;
  upsert?:
    | StoryReportUpsertWithWhereUniqueWithoutStoryInput[]
    | StoryReportUpsertWithWhereUniqueWithoutStoryInput;
  deleteMany?: StoryReportScalarWhereInput[] | StoryReportScalarWhereInput;
  updateMany?:
    | StoryReportUpdateManyWithWhereNestedInput[]
    | StoryReportUpdateManyWithWhereNestedInput;
}

export interface StoryReportUpdateWithWhereUniqueWithoutStoryInput {
  where: StoryReportWhereUniqueInput;
  data: StoryReportUpdateWithoutStoryDataInput;
}

export interface StoryReportUpdateWithoutStoryDataInput {
  reportedBy?: UserUpdateOneRequiredInput;
  reason?: String;
}

export interface StoryReportUpsertWithWhereUniqueWithoutStoryInput {
  where: StoryReportWhereUniqueInput;
  update: StoryReportUpdateWithoutStoryDataInput;
  create: StoryReportCreateWithoutStoryInput;
}

export interface StoryReportScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  reason?: String;
  reason_not?: String;
  reason_in?: String[] | String;
  reason_not_in?: String[] | String;
  reason_lt?: String;
  reason_lte?: String;
  reason_gt?: String;
  reason_gte?: String;
  reason_contains?: String;
  reason_not_contains?: String;
  reason_starts_with?: String;
  reason_not_starts_with?: String;
  reason_ends_with?: String;
  reason_not_ends_with?: String;
  AND?: StoryReportScalarWhereInput[] | StoryReportScalarWhereInput;
  OR?: StoryReportScalarWhereInput[] | StoryReportScalarWhereInput;
  NOT?: StoryReportScalarWhereInput[] | StoryReportScalarWhereInput;
}

export interface StoryReportUpdateManyWithWhereNestedInput {
  where: StoryReportScalarWhereInput;
  data: StoryReportUpdateManyDataInput;
}

export interface StoryReportUpdateManyDataInput {
  reason?: String;
}

export interface StoryUpsertWithWhereUniqueWithoutPostedByInput {
  where: StoryWhereUniqueInput;
  update: StoryUpdateWithoutPostedByDataInput;
  create: StoryCreateWithoutPostedByInput;
}

export interface StoryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  suspended?: Boolean;
  suspended_not?: Boolean;
  AND?: StoryScalarWhereInput[] | StoryScalarWhereInput;
  OR?: StoryScalarWhereInput[] | StoryScalarWhereInput;
  NOT?: StoryScalarWhereInput[] | StoryScalarWhereInput;
}

export interface StoryUpdateManyWithWhereNestedInput {
  where: StoryScalarWhereInput;
  data: StoryUpdateManyDataInput;
}

export interface StoryUpdateManyDataInput {
  body?: String;
  suspended?: Boolean;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface HashtagUpsertWithWhereUniqueWithoutModeratorInput {
  where: HashtagWhereUniqueInput;
  update: HashtagUpdateWithoutModeratorDataInput;
  create: HashtagCreateWithoutModeratorInput;
}

export interface UserUpsertWithoutStoriesInput {
  update: UserUpdateWithoutStoriesDataInput;
  create: UserCreateWithoutStoriesInput;
}

export interface StoryUpsertWithoutCommentsInput {
  update: StoryUpdateWithoutCommentsDataInput;
  create: StoryCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  body?: String;
}

export interface FeedbackCreateInput {
  title: String;
  description: String;
  sentBy?: UserCreateOneInput;
}

export interface FeedbackUpdateInput {
  title?: String;
  description?: String;
  sentBy?: UserUpdateOneInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface FeedbackUpdateManyMutationInput {
  title?: String;
  description?: String;
}

export interface HashtagUpdateInput {
  title?: String;
  moderator?: UserUpdateOneRequiredWithoutHashtagsInput;
  addedBy?: UserUpdateOneRequiredInput;
}

export interface HashtagUpdateManyMutationInput {
  title?: String;
}

export interface InfoUpdateInput {
  browser?: String;
  ip?: String;
  os?: String;
  country?: String;
  language?: String;
  zip?: String;
}

export interface InfoUpdateManyMutationInput {
  browser?: String;
  ip?: String;
  os?: String;
  country?: String;
  language?: String;
  zip?: String;
}

export interface LikeCreateInput {
  story: StoryCreateOneWithoutLikesInput;
  likedBy: UserCreateOneInput;
}

export interface StoryCreateOneWithoutLikesInput {
  create?: StoryCreateWithoutLikesInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryCreateWithoutLikesInput {
  body: String;
  postedBy: UserCreateOneWithoutStoriesInput;
  hashtags?: HashtagCreateManyInput;
  suspended: Boolean;
  comments?: CommentCreateManyWithoutStoryInput;
  reportes?: StoryReportCreateManyWithoutStoryInput;
}

export interface LikeUpdateInput {
  story?: StoryUpdateOneRequiredWithoutLikesInput;
  likedBy?: UserUpdateOneRequiredInput;
}

export interface StoryUpdateOneRequiredWithoutLikesInput {
  create?: StoryCreateWithoutLikesInput;
  update?: StoryUpdateWithoutLikesDataInput;
  upsert?: StoryUpsertWithoutLikesInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryUpdateWithoutLikesDataInput {
  body?: String;
  postedBy?: UserUpdateOneRequiredWithoutStoriesInput;
  hashtags?: HashtagUpdateManyInput;
  suspended?: Boolean;
  comments?: CommentUpdateManyWithoutStoryInput;
  reportes?: StoryReportUpdateManyWithoutStoryInput;
}

export interface StoryUpsertWithoutLikesInput {
  update: StoryUpdateWithoutLikesDataInput;
  create: StoryCreateWithoutLikesInput;
}

export interface MessageCreateInput {
  body: String;
  sentBy: UserCreateOneInput;
}

export interface MessageUpdateInput {
  body?: String;
  sentBy?: UserUpdateOneRequiredInput;
}

export interface MessageUpdateManyMutationInput {
  body?: String;
}

export interface NotificationCreateInput {
  story: StoryCreateOneInput;
  sender: UserCreateOneInput;
  receiver: UserCreateOneInput;
  body: String;
}

export interface StoryCreateOneInput {
  create?: StoryCreateInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryCreateInput {
  body: String;
  postedBy: UserCreateOneWithoutStoriesInput;
  hashtags?: HashtagCreateManyInput;
  suspended: Boolean;
  likes?: LikeCreateManyWithoutStoryInput;
  comments?: CommentCreateManyWithoutStoryInput;
  reportes?: StoryReportCreateManyWithoutStoryInput;
}

export interface NotificationUpdateInput {
  story?: StoryUpdateOneRequiredInput;
  sender?: UserUpdateOneRequiredInput;
  receiver?: UserUpdateOneRequiredInput;
  body?: String;
}

export interface StoryUpdateOneRequiredInput {
  create?: StoryCreateInput;
  update?: StoryUpdateDataInput;
  upsert?: StoryUpsertNestedInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryUpdateDataInput {
  body?: String;
  postedBy?: UserUpdateOneRequiredWithoutStoriesInput;
  hashtags?: HashtagUpdateManyInput;
  suspended?: Boolean;
  likes?: LikeUpdateManyWithoutStoryInput;
  comments?: CommentUpdateManyWithoutStoryInput;
  reportes?: StoryReportUpdateManyWithoutStoryInput;
}

export interface StoryUpsertNestedInput {
  update: StoryUpdateDataInput;
  create: StoryCreateInput;
}

export interface NotificationUpdateManyMutationInput {
  body?: String;
}

export interface StoryUpdateInput {
  body?: String;
  postedBy?: UserUpdateOneRequiredWithoutStoriesInput;
  hashtags?: HashtagUpdateManyInput;
  suspended?: Boolean;
  likes?: LikeUpdateManyWithoutStoryInput;
  comments?: CommentUpdateManyWithoutStoryInput;
  reportes?: StoryReportUpdateManyWithoutStoryInput;
}

export interface StoryUpdateManyMutationInput {
  body?: String;
  suspended?: Boolean;
}

export interface StoryReportCreateInput {
  story: StoryCreateOneWithoutReportesInput;
  reportedBy: UserCreateOneInput;
  reason: String;
}

export interface StoryCreateOneWithoutReportesInput {
  create?: StoryCreateWithoutReportesInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryCreateWithoutReportesInput {
  body: String;
  postedBy: UserCreateOneWithoutStoriesInput;
  hashtags?: HashtagCreateManyInput;
  suspended: Boolean;
  likes?: LikeCreateManyWithoutStoryInput;
  comments?: CommentCreateManyWithoutStoryInput;
}

export interface StoryReportUpdateInput {
  story?: StoryUpdateOneRequiredWithoutReportesInput;
  reportedBy?: UserUpdateOneRequiredInput;
  reason?: String;
}

export interface StoryUpdateOneRequiredWithoutReportesInput {
  create?: StoryCreateWithoutReportesInput;
  update?: StoryUpdateWithoutReportesDataInput;
  upsert?: StoryUpsertWithoutReportesInput;
  connect?: StoryWhereUniqueInput;
}

export interface StoryUpdateWithoutReportesDataInput {
  body?: String;
  postedBy?: UserUpdateOneRequiredWithoutStoriesInput;
  hashtags?: HashtagUpdateManyInput;
  suspended?: Boolean;
  likes?: LikeUpdateManyWithoutStoryInput;
  comments?: CommentUpdateManyWithoutStoryInput;
}

export interface StoryUpsertWithoutReportesInput {
  update: StoryUpdateWithoutReportesDataInput;
  create: StoryCreateWithoutReportesInput;
}

export interface StoryReportUpdateManyMutationInput {
  reason?: String;
}

export interface UserUpdateInput {
  username?: String;
  password?: String;
  email?: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
  hashtags?: HashtagUpdateManyWithoutModeratorInput;
  stories?: StoryUpdateManyWithoutPostedByInput;
  info?: InfoUpdateManyInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  password?: String;
  email?: String;
  role?: Role;
  verified?: Boolean;
  banned?: Boolean;
}

export interface VideoCreateInput {
  link: String;
  sentBy: UserCreateOneInput;
}

export interface VideoUpdateInput {
  link?: String;
  sentBy?: UserUpdateOneRequiredInput;
}

export interface VideoUpdateManyMutationInput {
  link?: String;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface FeedbackSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FeedbackWhereInput;
  AND?: FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput;
  OR?: FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput;
  NOT?: FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput;
}

export interface HashtagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: HashtagWhereInput;
  AND?: HashtagSubscriptionWhereInput[] | HashtagSubscriptionWhereInput;
  OR?: HashtagSubscriptionWhereInput[] | HashtagSubscriptionWhereInput;
  NOT?: HashtagSubscriptionWhereInput[] | HashtagSubscriptionWhereInput;
}

export interface InfoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InfoWhereInput;
  AND?: InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput;
  OR?: InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput;
  NOT?: InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LikeWhereInput;
  AND?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
  OR?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
  NOT?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NotificationWhereInput;
  AND?:
    | NotificationSubscriptionWhereInput[]
    | NotificationSubscriptionWhereInput;
  OR?:
    | NotificationSubscriptionWhereInput[]
    | NotificationSubscriptionWhereInput;
  NOT?:
    | NotificationSubscriptionWhereInput[]
    | NotificationSubscriptionWhereInput;
}

export interface StorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StoryWhereInput;
  AND?: StorySubscriptionWhereInput[] | StorySubscriptionWhereInput;
  OR?: StorySubscriptionWhereInput[] | StorySubscriptionWhereInput;
  NOT?: StorySubscriptionWhereInput[] | StorySubscriptionWhereInput;
}

export interface StoryReportSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StoryReportWhereInput;
  AND?: StoryReportSubscriptionWhereInput[] | StoryReportSubscriptionWhereInput;
  OR?: StoryReportSubscriptionWhereInput[] | StoryReportSubscriptionWhereInput;
  NOT?: StoryReportSubscriptionWhereInput[] | StoryReportSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VideoWhereInput;
  AND?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  OR?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  NOT?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  body: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  story: <T = StoryPromise>() => T;
  commentedBy: <T = UserPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  story: <T = StorySubscription>() => T;
  commentedBy: <T = UserSubscription>() => T;
}

export interface Story {
  id: ID_Output;
  body: String;
  suspended: Boolean;
}

export interface StoryPromise extends Promise<Story>, Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  hashtags: <T = FragmentableArray<Hashtag>>(
    args?: {
      where?: HashtagWhereInput;
      orderBy?: HashtagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  suspended: () => Promise<Boolean>;
  likes: <T = FragmentableArray<Like>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  reportes: <T = FragmentableArray<StoryReport>>(
    args?: {
      where?: StoryReportWhereInput;
      orderBy?: StoryReportOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface StorySubscription
  extends Promise<AsyncIterator<Story>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  hashtags: <T = Promise<AsyncIterator<HashtagSubscription>>>(
    args?: {
      where?: HashtagWhereInput;
      orderBy?: HashtagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  suspended: () => Promise<AsyncIterator<Boolean>>;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  reportes: <T = Promise<AsyncIterator<StoryReportSubscription>>>(
    args?: {
      where?: StoryReportWhereInput;
      orderBy?: StoryReportOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  email: String;
  role: Role;
  verified: Boolean;
  banned: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  verified: () => Promise<Boolean>;
  banned: () => Promise<Boolean>;
  hashtags: <T = FragmentableArray<Hashtag>>(
    args?: {
      where?: HashtagWhereInput;
      orderBy?: HashtagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  stories: <T = FragmentableArray<Story>>(
    args?: {
      where?: StoryWhereInput;
      orderBy?: StoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  info: <T = FragmentableArray<Info>>(
    args?: {
      where?: InfoWhereInput;
      orderBy?: InfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  banned: () => Promise<AsyncIterator<Boolean>>;
  hashtags: <T = Promise<AsyncIterator<HashtagSubscription>>>(
    args?: {
      where?: HashtagWhereInput;
      orderBy?: HashtagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  stories: <T = Promise<AsyncIterator<StorySubscription>>>(
    args?: {
      where?: StoryWhereInput;
      orderBy?: StoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  info: <T = Promise<AsyncIterator<InfoSubscription>>>(
    args?: {
      where?: InfoWhereInput;
      orderBy?: InfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Hashtag {
  id: ID_Output;
  title: String;
}

export interface HashtagPromise extends Promise<Hashtag>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  moderator: <T = UserPromise>() => T;
  addedBy: <T = UserPromise>() => T;
}

export interface HashtagSubscription
  extends Promise<AsyncIterator<Hashtag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  moderator: <T = UserSubscription>() => T;
  addedBy: <T = UserSubscription>() => T;
}

export interface Info {
  id: ID_Output;
  browser: String;
  ip: String;
  os: String;
  country: String;
  language: String;
  zip: String;
}

export interface InfoPromise extends Promise<Info>, Fragmentable {
  id: () => Promise<ID_Output>;
  browser: () => Promise<String>;
  ip: () => Promise<String>;
  os: () => Promise<String>;
  country: () => Promise<String>;
  language: () => Promise<String>;
  zip: () => Promise<String>;
}

export interface InfoSubscription
  extends Promise<AsyncIterator<Info>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  browser: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  os: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
}

export interface Like {
  id: ID_Output;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  story: <T = StoryPromise>() => T;
  likedBy: <T = UserPromise>() => T;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  story: <T = StorySubscription>() => T;
  likedBy: <T = UserSubscription>() => T;
}

export interface StoryReport {
  id: ID_Output;
  reason: String;
}

export interface StoryReportPromise extends Promise<StoryReport>, Fragmentable {
  id: () => Promise<ID_Output>;
  story: <T = StoryPromise>() => T;
  reportedBy: <T = UserPromise>() => T;
  reason: () => Promise<String>;
}

export interface StoryReportSubscription
  extends Promise<AsyncIterator<StoryReport>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  story: <T = StorySubscription>() => T;
  reportedBy: <T = UserSubscription>() => T;
  reason: () => Promise<AsyncIterator<String>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Feedback {
  id: ID_Output;
  title: String;
  description: String;
}

export interface FeedbackPromise extends Promise<Feedback>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
}

export interface FeedbackSubscription
  extends Promise<AsyncIterator<Feedback>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sentBy: <T = UserSubscription>() => T;
}

export interface FeedbackConnection {
  pageInfo: PageInfo;
  edges: FeedbackEdge[];
}

export interface FeedbackConnectionPromise
  extends Promise<FeedbackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackEdge>>() => T;
  aggregate: <T = AggregateFeedbackPromise>() => T;
}

export interface FeedbackConnectionSubscription
  extends Promise<AsyncIterator<FeedbackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackSubscription>() => T;
}

export interface FeedbackEdge {
  node: Feedback;
  cursor: String;
}

export interface FeedbackEdgePromise
  extends Promise<FeedbackEdge>,
    Fragmentable {
  node: <T = FeedbackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackEdgeSubscription
  extends Promise<AsyncIterator<FeedbackEdge>>,
    Fragmentable {
  node: <T = FeedbackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedback {
  count: Int;
}

export interface AggregateFeedbackPromise
  extends Promise<AggregateFeedback>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackSubscription
  extends Promise<AsyncIterator<AggregateFeedback>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HashtagConnection {
  pageInfo: PageInfo;
  edges: HashtagEdge[];
}

export interface HashtagConnectionPromise
  extends Promise<HashtagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HashtagEdge>>() => T;
  aggregate: <T = AggregateHashtagPromise>() => T;
}

export interface HashtagConnectionSubscription
  extends Promise<AsyncIterator<HashtagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HashtagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHashtagSubscription>() => T;
}

export interface HashtagEdge {
  node: Hashtag;
  cursor: String;
}

export interface HashtagEdgePromise extends Promise<HashtagEdge>, Fragmentable {
  node: <T = HashtagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HashtagEdgeSubscription
  extends Promise<AsyncIterator<HashtagEdge>>,
    Fragmentable {
  node: <T = HashtagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHashtag {
  count: Int;
}

export interface AggregateHashtagPromise
  extends Promise<AggregateHashtag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHashtagSubscription
  extends Promise<AsyncIterator<AggregateHashtag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InfoConnection {
  pageInfo: PageInfo;
  edges: InfoEdge[];
}

export interface InfoConnectionPromise
  extends Promise<InfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InfoEdge>>() => T;
  aggregate: <T = AggregateInfoPromise>() => T;
}

export interface InfoConnectionSubscription
  extends Promise<AsyncIterator<InfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInfoSubscription>() => T;
}

export interface InfoEdge {
  node: Info;
  cursor: String;
}

export interface InfoEdgePromise extends Promise<InfoEdge>, Fragmentable {
  node: <T = InfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InfoEdgeSubscription
  extends Promise<AsyncIterator<InfoEdge>>,
    Fragmentable {
  node: <T = InfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInfo {
  count: Int;
}

export interface AggregateInfoPromise
  extends Promise<AggregateInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInfoSubscription
  extends Promise<AsyncIterator<AggregateInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Message {
  id: ID_Output;
  body: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  sentBy: <T = UserSubscription>() => T;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Notification {
  id: ID_Output;
  body: String;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  story: <T = StoryPromise>() => T;
  sender: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  body: () => Promise<String>;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  story: <T = StorySubscription>() => T;
  sender: <T = UserSubscription>() => T;
  receiver: <T = UserSubscription>() => T;
  body: () => Promise<AsyncIterator<String>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoryConnection {
  pageInfo: PageInfo;
  edges: StoryEdge[];
}

export interface StoryConnectionPromise
  extends Promise<StoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoryEdge>>() => T;
  aggregate: <T = AggregateStoryPromise>() => T;
}

export interface StoryConnectionSubscription
  extends Promise<AsyncIterator<StoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStorySubscription>() => T;
}

export interface StoryEdge {
  node: Story;
  cursor: String;
}

export interface StoryEdgePromise extends Promise<StoryEdge>, Fragmentable {
  node: <T = StoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoryEdgeSubscription
  extends Promise<AsyncIterator<StoryEdge>>,
    Fragmentable {
  node: <T = StorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStory {
  count: Int;
}

export interface AggregateStoryPromise
  extends Promise<AggregateStory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStorySubscription
  extends Promise<AsyncIterator<AggregateStory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoryReportConnection {
  pageInfo: PageInfo;
  edges: StoryReportEdge[];
}

export interface StoryReportConnectionPromise
  extends Promise<StoryReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoryReportEdge>>() => T;
  aggregate: <T = AggregateStoryReportPromise>() => T;
}

export interface StoryReportConnectionSubscription
  extends Promise<AsyncIterator<StoryReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoryReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStoryReportSubscription>() => T;
}

export interface StoryReportEdge {
  node: StoryReport;
  cursor: String;
}

export interface StoryReportEdgePromise
  extends Promise<StoryReportEdge>,
    Fragmentable {
  node: <T = StoryReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoryReportEdgeSubscription
  extends Promise<AsyncIterator<StoryReportEdge>>,
    Fragmentable {
  node: <T = StoryReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStoryReport {
  count: Int;
}

export interface AggregateStoryReportPromise
  extends Promise<AggregateStoryReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoryReportSubscription
  extends Promise<AsyncIterator<AggregateStoryReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Video {
  id: ID_Output;
  link: String;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  sentBy: <T = UserSubscription>() => T;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  body: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface FeedbackSubscriptionPayload {
  mutation: MutationType;
  node: Feedback;
  updatedFields: String[];
  previousValues: FeedbackPreviousValues;
}

export interface FeedbackSubscriptionPayloadPromise
  extends Promise<FeedbackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackPreviousValuesPromise>() => T;
}

export interface FeedbackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackPreviousValuesSubscription>() => T;
}

export interface FeedbackPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
}

export interface FeedbackPreviousValuesPromise
  extends Promise<FeedbackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface FeedbackPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface HashtagSubscriptionPayload {
  mutation: MutationType;
  node: Hashtag;
  updatedFields: String[];
  previousValues: HashtagPreviousValues;
}

export interface HashtagSubscriptionPayloadPromise
  extends Promise<HashtagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HashtagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HashtagPreviousValuesPromise>() => T;
}

export interface HashtagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HashtagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HashtagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HashtagPreviousValuesSubscription>() => T;
}

export interface HashtagPreviousValues {
  id: ID_Output;
  title: String;
}

export interface HashtagPreviousValuesPromise
  extends Promise<HashtagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface HashtagPreviousValuesSubscription
  extends Promise<AsyncIterator<HashtagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface InfoSubscriptionPayload {
  mutation: MutationType;
  node: Info;
  updatedFields: String[];
  previousValues: InfoPreviousValues;
}

export interface InfoSubscriptionPayloadPromise
  extends Promise<InfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InfoPreviousValuesPromise>() => T;
}

export interface InfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InfoPreviousValuesSubscription>() => T;
}

export interface InfoPreviousValues {
  id: ID_Output;
  browser: String;
  ip: String;
  os: String;
  country: String;
  language: String;
  zip: String;
}

export interface InfoPreviousValuesPromise
  extends Promise<InfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  browser: () => Promise<String>;
  ip: () => Promise<String>;
  os: () => Promise<String>;
  country: () => Promise<String>;
  language: () => Promise<String>;
  zip: () => Promise<String>;
}

export interface InfoPreviousValuesSubscription
  extends Promise<AsyncIterator<InfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  browser: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  os: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  body: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  body: String;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface StorySubscriptionPayload {
  mutation: MutationType;
  node: Story;
  updatedFields: String[];
  previousValues: StoryPreviousValues;
}

export interface StorySubscriptionPayloadPromise
  extends Promise<StorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoryPreviousValuesPromise>() => T;
}

export interface StorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoryPreviousValuesSubscription>() => T;
}

export interface StoryPreviousValues {
  id: ID_Output;
  body: String;
  suspended: Boolean;
}

export interface StoryPreviousValuesPromise
  extends Promise<StoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  suspended: () => Promise<Boolean>;
}

export interface StoryPreviousValuesSubscription
  extends Promise<AsyncIterator<StoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  suspended: () => Promise<AsyncIterator<Boolean>>;
}

export interface StoryReportSubscriptionPayload {
  mutation: MutationType;
  node: StoryReport;
  updatedFields: String[];
  previousValues: StoryReportPreviousValues;
}

export interface StoryReportSubscriptionPayloadPromise
  extends Promise<StoryReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoryReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoryReportPreviousValuesPromise>() => T;
}

export interface StoryReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoryReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoryReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoryReportPreviousValuesSubscription>() => T;
}

export interface StoryReportPreviousValues {
  id: ID_Output;
  reason: String;
}

export interface StoryReportPreviousValuesPromise
  extends Promise<StoryReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  reason: () => Promise<String>;
}

export interface StoryReportPreviousValuesSubscription
  extends Promise<AsyncIterator<StoryReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  reason: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  email: String;
  role: Role;
  verified: Boolean;
  banned: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  verified: () => Promise<Boolean>;
  banned: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  banned: () => Promise<AsyncIterator<Boolean>>;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface VideoPreviousValues {
  id: ID_Output;
  link: String;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Hashtag",
    embedded: false
  },
  {
    name: "Story",
    embedded: false
  },
  {
    name: "Feedback",
    embedded: false
  },
  {
    name: "StoryReport",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Info",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
